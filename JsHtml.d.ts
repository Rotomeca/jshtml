import CSSHelper from './libs/CSSHelper';

declare module "@rotomeca/jshtml";
declare namespace JsHtml {
  namespace Helper {
    type Dict<T> = { [key: string]: T };
    type JsHtmlNode = ____JsHtml;
    type CSS<TNode extends JsHtml.Helper.JsHtmlNode> = CSSHelper<TNode>;
  }
  type AttribData = string | Function | number;
  type Attribs = string | Helper.Dict<AttribData>;
  type EachCallback<T> = (jshtml: ____JsHtml, item: T) => ____JsHtml;
  type ActionCallback = (jshtml: ____JsHtml, ...args: any[]) => ____JsHtml;
  const start: ____JsHtml;
}

declare class ____JsHtml {
  constructor(balise: string, parent: ____JsHtml, attribs?: JsHtml.Attribs);
  balise: string;
  attribs: JsHtml.Attribs;
  childs: ____JsHtml[];
  #_parent: ____JsHtml;

  observe({ key }?: { key?: string | null }): this;
  addClass(class_to_add: string): this;
  hasClass(class_to_verify: string): boolean;
  removeClass(class_to_remove: string): this;
  disable(): this;
  css(attrib: JsHtml.Helper.Dict<string | number>): this;
  css(key: string, value: string | number): this;
  hasAttr(name: string): boolean;
  attr(name: string, value: string | number | boolean): this;
  attrs(attributes: JsHtml.Helper.Dict<string>): this;
  removeAttr(name: string): this;
  parent<TParent extends ____JsHtml>(): TParent;
  first<TChild extends ____JsHtml>(): TChild;
  if(condition: boolean): this;
  elseif(condition: boolean): this;
  else(): this;
  endif(): this;
  tag(balise: string, attribs?: JsHtml.Attribs): this;
  tag_one_line(balise: string, attribs?: JsHtml.Attribs): this;
  template(attribs?: JsHtml.Attribs): this;
  a(attribs?: JsHtml.Attribs): this;
  dd(attribs?: JsHtml.Attribs): this;
  dt(attribs?: JsHtml.Attribs): this;
  dl(attribs?: JsHtml.Attribs): this;
  div(attribs?: JsHtml.Attribs): this;
  blockquote(attribs?: JsHtml.Attribs): this;
  ul(attribs?: JsHtml.Attribs): this;
  ol(attribs?: JsHtml.Attribs): this;
  li(attribs?: JsHtml.Attribs): this;
  span(attribs?: JsHtml.Attribs): this;
  p(attribs?: JsHtml.Attribs): this;
  img(attribs?: JsHtml.Attribs): this;
  style(): this;
  style_css_selector(key: string): this;
  style_css_selector_end(): this;
  css_prop_helper(): CSSHelper;
  style_css_prop(key: string, value: string): this;
  input(attribs?: JsHtml.Attribs): this;
  select(attribs?: JsHtml.Attribs): this;
  option(attribs?: JsHtml.Attribs): this;
  option_one_line(value: string, text: string, attribs?: JsHtml.Attribs): this;
  textarea(attribs?: JsHtml.Attribs): this;
  form(attribs?: JsHtml.Attribs): this;
  button(attribs?: JsHtml.Attribs): this;
  fieldset(attribs?: JsHtml.Attribs): this;
  label(attribs?: JsHtml.Attribs): this;
  legend(attribs?: JsHtml.Attribs): this;
  meter(attribs?: JsHtml.Attribs): this;
  optgroup(attribs?: JsHtml.Attribs): this;
  output(attribs?: JsHtml.Attribs): this;
  progress(attribs?: JsHtml.Attribs): this;
  br(): this;
  hr(): this;
  address(attribs?: JsHtml.Attribs): this;
  article(attribs?: JsHtml.Attribs): this;
  aside(attribs?: JsHtml.Attribs): this;
  header(attribs?: JsHtml.Attribs): this;
  h(num: number, attribs?: JsHtml.Attribs): this;
  h1(attribs?: JsHtml.Attribs): this;
  h2(attribs?: JsHtml.Attribs): this;
  h3(attribs?: JsHtml.Attribs): this;
  h4(attribs?: JsHtml.Attribs): this;
  h5(attribs?: JsHtml.Attribs): this;
  h6(attribs?: JsHtml.Attribs): this;
  hgroup(attribs?: JsHtml.Attribs): this;
  main(attribs?: JsHtml.Attribs): this;
  nav(attribs?: JsHtml.Attribs): this;
  section(attribs?: JsHtml.Attribs): this;
  menu(attribs?: JsHtml.Attribs): this;
  iframe(attribs?: JsHtml.Attribs, close?: boolean): this;
  canvas(attribs?: JsHtml.Attribs): this;
  script(attribs?: JsHtml.Attribs): this;
  table(attribs?: JsHtml.Attribs): this;
  caption(attribs?: JsHtml.Attribs): this;
  thead(attribs?: JsHtml.Attribs): this;
  col(): this;
  colgroup(attribs?: JsHtml.Attribs): this;
  tbody(attribs?: JsHtml.Attribs): this;
  td(attribs?: JsHtml.Attribs): this;
  th(attribs?: JsHtml.Attribs): this;
  tr(attribs?: JsHtml.Attribs): this;
  tfoot(attribs?: JsHtml.Attribs): this;
  details(attribs?: JsHtml.Attribs): this;
  summary(attribs?: JsHtml.Attribs): this;
  dialog(attribs?: JsHtml.Attribs): this;
  comment(text: string): this;
  text(text: string): this;
  end(debug?: string | null): this;
  each<T>(callback: JsHtml.EachCallback<T>, ...items: T[]): this;
  action(callback: JsHtml.ActionCallback, ...args: any[]): this;
  generate<TGenerated extends (HTMLElement[] | HTMLDivElement), TObserved extends HTMLElement> ({context = window, generateWrapper = false}?: { context?: Window; generateWrapper?: boolean }): { observed: JsHtml.Helper.Dict<TObserved>; generated: TGenerated };
  generate_html({joli_html = false}?: { joli_html?: boolean }): string;
  add_child<TChild extends ____JsHtml>(jshtml: TChild): this;
  toString(): string;
  static start(): ____JsHtml;
}

export = JsHtml;